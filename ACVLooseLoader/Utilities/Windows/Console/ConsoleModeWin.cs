using System.Runtime.InteropServices;
using static WindowsUtilities.ConsoleModeWinNative;

namespace WindowsUtilities
{
    /// <summary>
    /// Windows ConsoleMode functions to get and set modes.
    /// </summary>
    public static class ConsoleModeWin
    {
        /// <summary>
        /// Supported modes for windows console buffers.
        /// </summary>
        [Flags]
        public enum ConsoleModeWinFlags : uint
        {
            /// <summary>
            /// CTRL+C is processed by the system and is not placed in the input buffer.<br/>
            /// If the input buffer is being read by ReadFile or ReadConsole, other control keys are processed by the system and are not returned in the ReadFile or ReadConsole buffer.<br/>
            /// If the <see cref="EnableLineInput"/> mode is also enabled, backspace, carriage return, and line feed characters are handled by the system.
            /// </summary>
            EnableProcessedInput = 0x0001,

            /// <summary>
            /// The ReadFile or ReadConsole function returns only when a carriage return character is read.<br/>
            /// If this mode is disabled, the functions return when one or more characters are available.
            /// </summary>
            EnableLineInput = 0x0002,

            /// <summary>
            /// Characters read by the ReadFile or ReadConsole function are written to the active screen buffer as they are typed into the console.<br/>
            /// This mode can be used only if the <see cref="EnableLineInput"/> mode is also enabled.
            /// </summary>
            EnableEchoInput = 0x0004,

            /// <summary>
            /// User interactions that change the size of the console screen buffer are reported in the console's input buffer.<br/>
            /// Information about these events can be read from the input buffer by applications using the ReadConsoleInput function, but not by those using ReadFile or ReadConsole.
            /// </summary>
            EnableWindowInput = 0x0008,

            /// <summary>
            /// If the mouse pointer is within the borders of the console window and the window has the keyboard focus,<br/>
            /// mouse events generated by mouse movement and button presses are placed in the input buffer.<br/>
            /// <br/>
            /// These events are discarded by ReadFile or ReadConsole, even when this mode is enabled.<br/>
            /// The ReadConsoleInput function can be used to read MOUSE_EVENT input records from the input buffer.
            /// </summary>
            EnableMouseInput = 0x0010,

            /// <summary>
            /// When enabled, text entered in a console window will be inserted at the current cursor location and all text following that location will not be overwritten.<br/>
            /// When disabled, all following text will be overwritten.
            /// </summary>
            EnableInsertMode = 0x0020,

            /// <summary>
            /// This flag enables the user to use the mouse to select and edit text.<br/>
            /// To enable this mode, use <see cref="EnableQuickEditMode"/> | <see cref="EnableExtendedFlags"/>.<br/>
            /// To disable this mode, use <see cref="EnableExtendedFlags"/> without this flag.
            /// </summary>
            EnableQuickEditMode = 0x0040,

            /// <summary>
            /// Must be enabled in order to enable <see cref="EnableInsertMode"/> or <see cref="EnableQuickEditMode"/>, and possibly <see cref="EnableAutoPosition"/>.
            /// </summary>
            EnableExtendedFlags = 0x0080,

            /// <summary>
            /// Undocumented flag, possibly requires <see cref="EnableExtendedFlags"/> to be enabled.
            /// </summary>
            EnableAutoPosition = 0x0100,

            /// <summary>
            /// Setting this flag directs the Virtual Terminal processing engine to convert user input<br/>
            /// received by the console window into Console Virtual Terminal Sequences that can be <br/>
            /// retrieved by a supporting application through ReadFile or ReadConsole functions.<br/>
            /// <br/>
            /// The typical usage of this flag is intended in conjunction with ENABLE_VIRTUAL_TERMINAL_PROCESSING<br/>
            /// on the output handle to connect to an application that communicates exclusively via virtual terminal sequences.
            /// </summary>
            EnableVirtualTerminalInput = 0x0200,
        }

        /// <summary>
        /// Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer.
        /// </summary>
        /// <param name="mode">The current mode of the specified buffer.</param>
        /// <returns>Whether or not getting the current mode succeeded.</returns>
        public static bool GetConsoleMode(out ConsoleModeWinFlags mode)
        {
            try
            {
                IntPtr conHandle = GetStdHandle(STD_INPUT_HANDLE);
                if (!ConsoleModeWinNative.GetConsoleMode(conHandle, out uint rawMode))
                {
                    Console.WriteLine($"{nameof(GetConsoleMode)} failed due to an error:\n{Marshal.GetLastWin32Error()}");
                    mode = default;
                    return false;
                }

                mode = (ConsoleModeWinFlags)rawMode;
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{nameof(GetConsoleMode)} failed due to an error:\n{ex}");
                mode = default;
                return false;
            }
        }

        /// <summary>
        /// Sets the input mode of a console's input buffer or the output mode of a console screen buffer.
        /// </summary>
        /// <param name="mode">The input or output mode to be set.</param>
        /// <returns>Whether or not setting the mode succeeded.</returns>
        public static bool SetConsoleMode(ConsoleModeWinFlags mode)
        {
            try
            {
                IntPtr conHandle = GetStdHandle(STD_INPUT_HANDLE);
                if (!ConsoleModeWinNative.SetConsoleMode(conHandle, (uint)mode))
                {
                    Console.WriteLine($"{nameof(SetConsoleMode)} failed due to an error:\n{Marshal.GetLastWin32Error()}");
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{nameof(SetConsoleMode)} failed due to an error:\n{ex}");
                mode = default;
                return false;
            }
        }
    }
}
